// Given an array of queen locations (where the index and the value make up the location), 
// return the number of vulnerabilities of the most vulnerable queen.

var queenVulnerability = function(arr) {
  var max = 0;
  var counter = 0;
  var cardinalities;

  var vulnerabilityCount = function(idx, nb, card) {
    if (idx - nb < 0 && idx + nb > arr.length - 1) {
      return counter;
    } else {
      if (idx - nb >= 0) {
        //check north-east
        if (!card[0] && arr[idx-nb] === arr[idx]) {
          card[0] = true;
          counter++;
        // search north
        } else if (!card[1] && arr[idx-nb] === arr[i] - nb) {
          card[1] = true;
          counter++;
        // search north-west
        } else if (!card[2] && arr[idx-nb] === arr[idx] + nb) {
          card[2] = true;
          counter++;
        }
      }
      if (idx + nb <= arr.length-1) {
        // search south-west
        if (!card[5] && arr[idx+nb] === arr[idx]) {
          card[5] = true;
          counter++;
        // search south
        } else if (!card[6] && arr[idx+nb] === arr[i] - nb) {
          card[6] = true;
          counter++;
        // search south-east
        } else if (!card[7] && arr[idx+nb] === arr[idx] + nb) {
          card[7] = true;
          counter++;
        }  
      }
      nb++;
      return vulnerabilityCount(idx, nb, card);
    }
  };

  for (var i = 0; i < arr.length; i++) {
    counter = 0;
    cardinalities = [false, false, false, false, false, false, false, false];
    counter = vulnerabilityCount(i, 1, cardinalities);
    if (counter > max) {
      max = counter;
      where = i;
    }
  }
  
  return max;

};

console.log(queenVulnerability([5, 5, 5, 5, 5, 0]));

// 0 0 0 0 0 1
// 0 0 0 0 0 1
// 0 0 0 0 0 1
// 0 0 0 0 0 1
// 0 0 0 0 0 1
// 1 0 0 0 0 0
